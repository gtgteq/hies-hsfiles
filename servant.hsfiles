{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              "{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}"
license:             BSD3
author:              "{{author-name}}{{^author-name}}Author name here{{/author-name}}"
maintainer:          "{{author-email}}{{^author-email}}example@example.com{{/author-email}}"
copyright:           "{{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}"

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            {{category}}{{^category}}Web{{/category}}

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.7 && < 5
- http-client
- network
- servant
- servant-server
- wai-cors
- wai-middleware-static
- warp
- bytestring
- lens
- monad-logger
- mtl
- safe-exceptions
- text

library:
  source-dirs: src

executables:
  server:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

  gen-purs:
    main:                GeneratePureScript.hs
    source-dirs:         gen
    dependencies:
    - {{name}}
    - lens
    - purescript-bridge
    - servant-purescript

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

{-# START_FILE default.nix #-}
let
  haskellNixSrc = fetchTarball {
    url = "https://github.com/input-output-hk/haskell.nix/tarball/f4136211c933b444ab2e0f358abd223929970220";
    sha256 = "1b9nxzkg29hwczr6pb6a7arxka8z0swzq7b2bqyxqzr4qvpcjlc1";
  };
  haskellNix = import haskellNixSrc {};

  all-hies = fetchTarball {
    # Insert the desired all-hies commit here
    url = "https://github.com/infinisil/all-hies/tarball/09ba836904fa290b5e37d5403150ea0c921661fb";
    # Insert the correct hash after the first evaluation
    sha256 = "0qbjqv1fkhkx1cffqybz1mfks1jphh0vh3zd8ad2qd6lch4gyys4";
  };

  pkgs = import haskellNix.sources.nixpkgs-2003 (haskellNix.nixpkgsArgs // {
    overlays = haskellNix.nixpkgsArgs.overlays ++ [
      (import all-hies {}).overlay
    ];
  });

  set = pkgs.haskell-nix.stackProject {
    name = "{{name}}";
    src = pkgs.haskell-nix.haskellLib.cleanGit {
      name = "{{name}}";
      src = ./.;
    };
    modules = [{
      # Make Cabal reinstallable
      nonReinstallablePkgs = [ "rts" "ghc-heap" "ghc-prim" "integer-gmp" "integer-simple" "base" "deepseq" "array" "ghc-boot-th" "pretty" "template-haskell" "ghcjs-prim" "ghcjs-th" "ghc-boot" "ghc" "Win32" "array" "binary" "bytestring" "containers" "directory" "filepath" "ghc-boot" "ghc-compact" "ghc-prim" "hpc" "mtl" "parsec" "process" "text" "time" "transformers" "unix" "xhtml" "terminfo" ];
    }];
  };
in set.{{name}}.components.exes.server // {
  env = set.shellFor {
    packages = p: [ p.{{name}} ];
    tools = {
      hie = "unstable";
    };
    nativeBuildInputs = [ pkgs.stack ];
    shellHook = ''
      export HIE_HOOGLE_DATABASE=$(realpath "$(dirname "$(realpath "$(which hoogle)")")/../share/doc/hoogle/default.hoo")
    '';
  };
}

{-# START_FILE shell.nix #-}
(import ./.).env

{-# START_FILE .envrc #-}
use nix

{-# START_FILE .ghcid #-}
--command="stack ghci unused-dev:exe:server" --run="main"

{-# START_FILE cabal.project #-}
packages: .

index-state: 2020-05-15T00:00:00Z

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE test/Spec.hs #-}
main :: IO ()
main = putStrLn "Test suite not yet implemented"

{-# START_FILE gen/GeneratePureScript.hs #-}
main :: IO ()
main = return ()

{-# START_FILE src/App.hs #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}

module App where

import Control.Lens
import Control.Monad.Logger (LoggingT)
import Control.Monad.Reader (ReaderT(..))
import qualified Data.Text.Lazy as TL
import Servant

data AppConfig = AppConfig
  { _appConfigDebug :: Bool
  }
  deriving (Show)

data AppArg = AppArg
  { _appArgConfig :: AppConfig
  }

type AppHandler = ReaderT AppArg (LoggingT Handler)
type AppServer api = ServerT api AppHandler

type ApiEcho = ReqBody '[PlainText] TL.Text :> Post '[PlainText] TL.Text
type Api = "echo" :> ApiEcho

api :: Proxy Api
api = Proxy

$(makeLenses ''AppConfig)
$(makeLenses ''AppArg)

appArgConfigDebug :: Lens' AppArg Bool
appArgConfigDebug = appArgConfig . appConfigDebug

{-# START_FILE src/Server.hs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Server where

import Control.Monad.Logger
import Network.Wai.Handler.Warp
  ( run
  )
import Network.Wai.Middleware.Cors
  ( simpleCors
  )
import Network.Wai.Middleware.Static
  ( addBase
  , policy
  , staticPolicy
  )
import Servant.API
  ( (:<|>)(..)
  )
import Servant.Server
  ( ServerError(..)
  , err400
  , hoistServer
  , serve
  )

import Control.Exception (ErrorCall)
import qualified Control.Exception.Safe as Exception (Handler(..))
import Control.Exception.Safe (catches, throwM)
import Control.Monad.IO.Class (MonadIO, liftIO)
import Control.Monad.Reader (runReaderT)
import qualified Data.ByteString.Lazy.Char8 as BLC
import qualified Data.Text as T
import qualified Data.Text.Lazy.IO as TL

import App

echo :: AppServer ApiEcho
echo t = errorHandler $ do
  liftIO $ TL.putStrLn t
  return t

errorHandler :: AppHandler a -> AppHandler a
errorHandler = flip catches
  [ Exception.Handler $ \(e :: ServerError) -> do
      logErrorN $ T.pack $ show e
      throwM e
  , Exception.Handler $ \(e :: ErrorCall) -> do
      logErrorN $ T.pack $ show e
      throwM err400 { errBody = BLC.pack $ show e }
  ]

startServer :: IO ()
startServer = do
  let runLogger :: MonadIO m => LoggingT m a -> m a
      runLogger = runStderrLoggingT . filterLogger (\_ level -> level > LevelDebug)
  let arg = AppArg (AppConfig True)
  run 8080 $ middleware $ serve api $ hoistServer api (runLogger . flip runReaderT arg)
    $ echo
 where
  middleware = simpleCors . midPolicy
  midPolicy = staticPolicy $ indexPolicy <> addBase "./html"
  indexPolicy = policy $ Just . \b -> if null b || last b == '/' then b <> "index.html" else b

serverMain :: IO ()
serverMain = startServer

{-# START_FILE app/Main.hs #-}
module Main where

import Server

main :: IO ()
main = serverMain

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2020{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE .gitignore #-}
result/
.stack-work/
*~
